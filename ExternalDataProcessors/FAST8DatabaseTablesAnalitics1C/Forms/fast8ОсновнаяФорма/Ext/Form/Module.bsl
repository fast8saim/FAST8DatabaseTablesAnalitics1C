// MIT License
//
// Copyright (c) 2023 FAST8.RU
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	
	// Получение информации о размере таблиц самой платформой доступна с 8.3.15
	Если Лев(ВерсияПриложения, 4) = "8.3." Тогда
		ВерсияПриложения = Сред(ВерсияПриложения, 5);
		// А вот СтрНайти() может не дать запустить обработку
		ПозицияТочки = Найти(ВерсияПриложения, ".");
		
		ТипЧисло = Новый ОписаниеТипов("Число");
		НомерРелиза = ТипЧисло.ПривестиЗначение(Лев(ВерсияПриложения, ПозицияТочки - 1));
		Если НомерРелиза >= 15 Тогда
			fast8ДоступноПолучениеРазмераДанных = Истина;
		КонецЕсли;
	КонецЕсли;
			
	Если Не fast8ДоступноПолучениеРазмераДанных Тогда
		Элементы.fast8РезультатРазмер.Видимость = Ложь;
		Элементы.fast8РезультатКонтекстноеМенюfast8РассчитатьРазмерТекущейСтроки.Видимость = Ложь;
		Элементы.Формаfast8ИнформацияОРазмереТаблиц.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ЗаполнитьСтруктуруТаблицБазы", 0.3, Истина);
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыfast8Результат

&НаКлиенте
Процедура fast8РезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "fast8РезультатКоличество" Тогда
		ПерейтиКСписку();
	ИначеЕсли Поле.Имя = "fast8РезультатИмяТаблицы" Тогда
		ОткрытьФормуСтруктурыХранения();
	ИначеЕсли Поле.Имя = "fast8РезультатИмяОбъекта" Тогда
		ОткрытьФормуОбъектаМетаданных();
	КонецЕсли;
	
КонецПроцедуры // fast8РезультатВыбор()

&НаКлиенте
Процедура fast8РезультатПриАктивизацииСтроки(Элемент)
	
	Элементы.fast8РезультатКонтекстноеМенюfast8ОбъектМетаданных.Доступность = Ложь;
	Элементы.fast8РезультатКонтекстноеМенюfast8СтруктураХранения.Доступность = Ложь;
	Элементы.fast8РезультатКонтекстноеМенюfast8ПерейтиКСписку.Доступность = Ложь;
	Элементы.fast8РезультатКонтекстноеМенюfast8ГрафикНаполненияПоПериоду.Доступность = Ложь;
	Элементы.fast8РезультатКонтекстноеМенюfast8РазмерыФайловБСП.Доступность = Ложь;
	Элементы.fast8РезультатКонтекстноеМенюfast8ПровестиАнализТекущейСтроки.Доступность = Ложь;
	Элементы.fast8РезультатКонтекстноеМенюfast8РассчитатьРазмерТекущейСтроки.Доступность = Ложь;
	
	ТекущиеДанные = Элементы.fast8Результат.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		Для Каждого ЭлементСписка Из ТекущиеДанные.ДоступныеКоманды Цикл
			Элементы["fast8РезультатКонтекстноеМеню" + ЭлементСписка.Значение].Доступность = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // fast8РезультатПриАктивизацииСтроки()

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура fast8ПровестиАнализ(Команда)
	
	ПровестиАнализНаСервере();
	
КонецПроцедуры // fast8ПровестиАнализ()

&НаКлиенте
Процедура fast8ИнформацияОРазмереТаблиц(Команда)
	
	ОткрытьФорму("ВнешняяОбработка.FAST8DatabaseTablesAnalitics1C.Форма.fast8ИнформацияОРазмереТаблиц",, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // fast8ИнформацияОРазмереТаблиц()

&НаКлиенте
Процедура fast8ОбъектМетаданных(Команда)
	
	ОткрытьФормуОбъектаМетаданных();
	
КонецПроцедуры // fast8ОбъектМетаданных()

&НаКлиенте
Процедура fast8СтруктураХранения(Команда)
	
	ОткрытьФормуСтруктурыХранения();
	
КонецПроцедуры // fast8СтруктураХранения()

&НаКлиенте
Процедура fast8ПерейтиКСписку(Команда)
	
	ПерейтиКСписку();
	
КонецПроцедуры // fast8ПерейтиКСписку()

&НаКлиенте
Процедура fast8ГрафикНаполненияПоПериоду(Команда)
	
	ОткрытьДополнительнуюФорму("fast8СтатистикаПоПериодам");
	
КонецПроцедуры // fast8ГрафикНаполненияПоПериоду()

&НаКлиенте
Процедура fast8РазмерыФайловБСП(Команда)
	
	ОткрытьДополнительнуюФорму("fast8ИнформацияОРазмереФайловБСП");
	
КонецПроцедуры // fast8РазмерыФайловБСП()

&НаКлиенте
Процедура fast8РассчитатьРазмер(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("fast8РассчитатьРазмерЗавершение", ЭтаФорма), "Расчет займёт неоправданно много времени. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // fast8РассчитатьРазмер()

&НаКлиенте
Процедура fast8РассчитатьРазмерТекущейСтроки(Команда)
	
	ТекущиеДанные = Элементы.fast8Результат.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Размер = РассчитатьРазмерТаблицы(ТекущиеДанные.ПолноеИмяМетаданного);
	КонецЕсли;
	
КонецПроцедуры // fast8РассчитатьРазмерТекущейСтроки()

&НаКлиенте
Процедура fast8ПровестиАнализТекущейСтроки(Команда)
	
	ТекущиеДанные = Элементы.fast8Результат.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИнформацияОКоличестве = ЗаполнитьКоличествоЭлементовТаблицы(ТекущиеДанные.ПолноеИмяМетаданного, ТекущиеДанные.Группировка);
						
		ТекущиеДанные.Количество = ИнформацияОКоличестве.Количество;
		ТекущиеДанные.ПомеченныхНаУдаление = ИнформацияОКоличестве.ПомеченныхНаУдаление;
	КонецЕсли;
	
КонецПроцедуры // fast8ПровестиАнализТекущейСтроки()

&НаКлиенте
Процедура fast8ОПрограмме(Команда)
	
	ОткрытьФорму("ВнешняяОбработка.FAST8DatabaseTablesAnalitics1C.Форма.fast8ОПрограмме",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // fast8ОПрограмме()

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура fast8РассчитатьРазмерЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РассчитатьРазмерВсехТаблицБазы();
	КонецЕсли;

КонецПроцедуры // fast8РассчитатьРазмерЗавершение()

&НаКлиенте
Процедура ЗаполнитьСтруктуруТаблицБазы()
	
	ЗаполнитьСтруктуруТаблицБазыНаСервере();
	
КонецПроцедуры // ЗаполнитьСтруктуруТаблицБазы()

&НаСервере
Процедура ЗаполнитьСтруктуруТаблицБазыНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	fast8Результат.ПолучитьЭлементы().Очистить();
	
	ТаблицаМетаданных = ПолучитьСтруктуруХраненияБазыДанных();
	ТаблицаМетаданных.Индексы.Добавить("ИмяТаблицы, Назначение");
			
	МетаГруппы = Новый Структура;
	МетаГруппы.Вставить("Справочники", "Справочник.");
	МетаГруппы.Вставить("Документы", "Документ.");
	МетаГруппы.Вставить("ПланыСчетов", "ПланСчетов.");
	МетаГруппы.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик.");
	МетаГруппы.Вставить("ПланыВидовРасчета", "ПланВидовРасчета.");
	МетаГруппы.Вставить("РегистрыСведений", "РегистрСведений.");
	МетаГруппы.Вставить("РегистрыНакопления", "РегистрНакопления.");
	МетаГруппы.Вставить("РегистрыБухгалтерии", "РегистрБухгалтерии.");
	МетаГруппы.Вставить("РегистрыРасчета", "РегистрРасчета.");
	МетаГруппы.Вставить("ПланыОбмена", "ПланОбмена.");
	МетаГруппы.Вставить("БизнесПроцессы", "БизнесПроцесс.");
	МетаГруппы.Вставить("Задачи", "Задача.");
	МетаГруппы.Вставить("Константы", "Константа.");
	
	Если Метаданные.Перечисления.Найти("ТипыХраненияФайлов") <> Неопределено И Метаданные.РегистрыСведений.Найти("ДвоичныеДанныеФайлов") <> Неопределено Тогда
		ЕстьПодсистемаХраненияБСП = Истина;
	Иначе
		ЕстьПодсистемаХраненияБСП = Ложь;
	КонецЕсли;
	
	Для Каждого МетаГруппа Из МетаГруппы Цикл 
		НоваяГруппировка = fast8Результат.ПолучитьЭлементы().Добавить();
		НоваяГруппировка.Группировка = МетаГруппа.Ключ + " (" + Метаданные[МетаГруппа.Ключ].Количество() + ")";
		
		Для Каждого МетаОбъект Из Метаданные[МетаГруппа.Ключ] Цикл 
			
			ПолноеИмяМетаданного = МетаГруппа.Значение + МетаОбъект.Имя;
			
			////////////////
			//ОСНОВНОЕ
			//
			
			НоваяСтрока = НоваяГруппировка.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Группировка = МетаГруппа.Ключ;
			НоваяСтрока.ИмяОбъекта	= МетаОбъект.Имя;
			НоваяСтрока.Синоним		= МетаОбъект.Синоним;
			НоваяСтрока.ПолноеИмяМетаданного = ПолноеИмяМетаданного;
			Если Не МетаГруппа.Ключ = "Константы" Тогда
				НоваяСтрока.Расшифровка = "e1cib/list/" + ПолноеИмяМетаданного;
			КонецЕсли;
															
			////////////////
			//СТРУКТУРА БД
			//
			
			СтрокиТаблицБД = ТаблицаМетаданных.НайтиСтроки(Новый Структура("ИмяТаблицы, Назначение", ПолноеИмяМетаданного, ?(МетаГруппа.Ключ = "Константы", "Константа", "Основная")));
			Если СтрокиТаблицБД.Количество() Тогда
				НоваяСтрока.ИмяТаблицы = СтрокиТаблицБД.Получить(0).ИмяТаблицыХранения;				
			КонецЕсли;
						
			////////////////
			//КОМАНДЫ СПИСКА
			//
			
			НоваяСтрока.ДоступныеКоманды.Добавить("fast8ОбъектМетаданных");
			НоваяСтрока.ДоступныеКоманды.Добавить("fast8СтруктураХранения");
			НоваяСтрока.ДоступныеКоманды.Добавить("fast8ПровестиАнализТекущейСтроки");
			НоваяСтрока.ДоступныеКоманды.Добавить("fast8РассчитатьРазмерТекущейСтроки");
			Если Не МетаГруппа.Ключ = "Константы" Тогда
				НоваяСтрока.ДоступныеКоманды.Добавить("fast8ПерейтиКСписку");
			КонецЕсли;
			
			ДоступенГрафикПоПериоду = Ложь;
			Если МетаГруппа.Ключ = "Документы" Тогда
				ДоступенГрафикПоПериоду = Истина;
			ИначеЕсли МетаГруппа.Ключ = "РегистрыСведений" Тогда
				Если Не МетаОбъект.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					ДоступенГрафикПоПериоду = Истина;
				КонецЕсли;
			ИначеЕсли МетаГруппа.Ключ = "РегистрыНакопления" Тогда
				ДоступенГрафикПоПериоду = Истина;
			ИначеЕсли МетаГруппа.Ключ = "РегистрыБухгалтерии" Тогда
				ДоступенГрафикПоПериоду = Истина;
			ИначеЕсли МетаГруппа.Ключ = "РегистрыРасчета" Тогда
				ДоступенГрафикПоПериоду = Истина;
			ИначеЕсли МетаГруппа.Ключ = "БизнесПроцессы" Тогда
				ДоступенГрафикПоПериоду = Истина;
			ИначеЕсли МетаГруппа.Ключ = "Задачи" Тогда
				ДоступенГрафикПоПериоду = Истина;
			КонецЕсли;
			
			Если ДоступенГрафикПоПериоду Тогда
				НоваяСтрока.ДоступныеКоманды.Добавить("fast8ГрафикНаполненияПоПериоду");
			КонецЕсли;
			
			Если ЕстьПодсистемаХраненияБСП Тогда
				Если МетаГруппа.Ключ = "Справочники" И МетаОбъект.Реквизиты.Найти("Размер") <> Неопределено И МетаОбъект.Реквизиты.Найти("ТипХраненияФайла") <> Неопределено
					И МетаОбъект.Реквизиты.Найти("ВладелецФайла") <> Неопределено Или ПолноеИмяМетаданного = "РегистрСведений.ДвоичныеДанныеФайлов" Тогда
					НоваяСтрока.ДоступныеКоманды.Добавить("fast8РазмерыФайловБСП");
				КонецЕсли;
			КонецЕсли;
			
			////////////////
			//ПРИНАДЛЕЖНОСТЬ
			//
			
			НоваяСтрока.Принадлежность = "Конфигурация";
			Если МетаОбъект.РасширениеКонфигурации() = Неопределено Тогда
				Если МетаОбъект.ЕстьИзмененияРасширениямиКонфигурации() Тогда
					НоваяСтрока.Принадлежность = "Изменено в расширении";
				КонецЕсли;
			Иначе
				НоваяСтрока.Принадлежность = "Объект расширения";
			КонецЕсли;
			
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтруктуруТаблицБазыНаСервере()

&НаСервере
Процедура РассчитатьРазмерВсехТаблицБазы()
	
	ПровестиАнализНаСервере();
	
	Для Каждого Уровень1 Из fast8Результат.ПолучитьЭлементы() Цикл
		Для Каждого Уровень2 Из Уровень1.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(Уровень2.Количество) Тогда
				Уровень2.Размер = РассчитатьРазмерТаблицы(Уровень2.ПолноеИмяМетаданного);
				Уровень1.Размер = Уровень1.Размер + Уровень2.Размер;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьРазмерТаблицБазы()

&НаСервереБезКонтекста
Функция РассчитатьРазмерТаблицы(ПолноеИмяМетаданного)
	
	Размер = 0;
	МассивМетаданных = Новый Массив;
	МассивМетаданных.Добавить(ПолноеИмяМетаданного);
	УстановитьБезопасныйРежим(Истина);
	// На ранних версиях платформы обработка не запустится из-за отсутствия платформенного метода
	Выполнить "Размер = ПолучитьРазмерДанныхБазыДанных(, МассивМетаданных) / 1024 / 1024;";
	
	Возврат Размер;
	
КонецФункции // РассчитатьРазмерТаблицы()

&НаКлиенте
Процедура ОткрытьФормуОбъектаМетаданных()
	
	ОткрытьДополнительнуюФорму("fast8ИнформацияОбОбъектеМетаданных");
	
КонецПроцедуры // ОткрытьФормуОбъектаМетаданных()

&НаКлиенте
Процедура ОткрытьФормуСтруктурыХранения()
	
	ОткрытьДополнительнуюФорму("fast8ИнформацияОСтруктуреХранения");
	
КонецПроцедуры // ОткрытьФормуСтруктурыХранения()

&НаКлиенте
Процедура ПерейтиКСписку()
	
	ТекущиеДанные = Элементы.fast8Результат.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Расшифровка) Тогда
			ПерейтиПоНавигационнойСсылке(ТекущиеДанные.Расшифровка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПерейтиКСписку()

&НаКлиенте
Процедура ОткрытьДополнительнуюФорму(ИмяДополнительнойФормы)
	
	ТекущиеДанные = Элементы.fast8Результат.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ИмяОбъекта) Тогда
			ПараметрыОткрытия = Новый Структура("ПолноеИмяМетаданных", ТекущиеДанные.ПолноеИмяМетаданного);
			ОткрытьФорму("ВнешняяОбработка.FAST8DatabaseTablesAnalitics1C.Форма." + ИмяДополнительнойФормы, ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОткрытьДополнительнуюФорму()

&НаСервереБезКонтекста
Функция ЗаполнитьКоличествоЭлементовТаблицы(ПолноеИмяМетаданного, ИмяГруппировки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	СУММА(РасчетКоличества.КоличествоЭлементов) КАК КоличествоЭлементов,
	|	СУММА(РасчетКоличества.КоличествоПомеченныхНаУдаление) КАК КоличествоПомеченныхНаУдаление
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(30, 0)) КАК КоличествоЭлементов,
	|		ВЫРАЗИТЬ(0 КАК ЧИСЛО(30, 0)) КАК КоличествоПомеченныхНаУдаление // КОМАНДА СУБД УВЕЛИЧИТЬ РАЗМЕРНОСТЬ ЧИСЕЛ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		1,
	|		%1
	|	ИЗ
	|		%2 КАК Таблица) КАК РасчетКоличества";
		
	////////////////
	//КОЛИЧЕСТВО
	//
	
	Если СтрокаНачинаетсяС(ИмяГруппировки, "Константы") Тогда
		КоличествоЭлементов = 1;
		КоличествоПомеченныхНаУдаление = 0;
	Иначе				
		Если СтрокаНачинаетсяС(ИмяГруппировки, "Регистр") Тогда
			ШаблонЗамены = "0";
		Иначе
			ШаблонЗамены = "ВЫБОР КОГДА ПометкаУдаления ТОГДА 1 ИНАЧЕ 0 КОНЕЦ";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрШаблон(ШаблонЗапроса, ШаблонЗамены, ПолноеИмяМетаданного);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			КоличествоЭлементов = ?(Выборка.КоличествоЭлементов = Null, 0, Выборка.КоличествоЭлементов);
			КоличествоПомеченныхНаУдаление = ?(Выборка.КоличествоПомеченныхНаУдаление = Null, 0, Выборка.КоличествоПомеченныхНаУдаление);
		Иначе
			КоличествоЭлементов = 0;
			КоличествоПомеченныхНаУдаление = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Количество, ПомеченныхНаУдаление", КоличествоЭлементов, КоличествоПомеченныхНаУдаление);
		
КонецФункции // ЗаполнитьКоличествоЭлементовТаблицы()

&НаСервере
Процедура ПровестиАнализНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
			
	Для Каждого Уровень1 Из fast8Результат.ПолучитьЭлементы() Цикл
		Для Каждого Уровень2 Из Уровень1.ПолучитьЭлементы() Цикл
			
			//@skip-check query-in-loop
			ИнформацияОКоличестве = ЗаполнитьКоличествоЭлементовТаблицы(Уровень2.ПолноеИмяМетаданного, Уровень1.Группировка);
						
			Уровень2.Количество	= ИнформацияОКоличестве.Количество;
			Уровень2.ПомеченныхНаУдаление = ИнформацияОКоличестве.ПомеченныхНаУдаление;
			
			Уровень1.Количество = Уровень1.Количество + Уровень2.Количество;
			Уровень1.ПомеченныхНаУдаление = Уровень1.ПомеченныхНаУдаление + Уровень2.ПомеченныхНаУдаление;
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры // ПровестиАнализНаСервере()

&НаСервереБезКонтекста
Функция СтрокаНачинаетсяС(ИсходнаяСтрока, Вхождение)
	
	// СтрНачинаетсяС стала доступна в режиме совместимости 8.3.6, легаси-базы тоже должны работать
	
	Возврат (Лев(ИсходнаяСтрока, СтрДлина(Вхождение)) = Вхождение);
	
КонецФункции // СтрокаНачинаетсяС()

#КонецОбласти // СлужебныеПроцедурыИФункции
